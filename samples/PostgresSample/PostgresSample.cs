using System;
using System.Threading.Tasks;
using Crude.FunctionalTesting.Core;
using Crude.FunctionalTesting.Dependency.Postgres;
using Crude.FunctionalTesting.TestServer;
using FluentAssertions;
using Microsoft.Extensions.DependencyInjection;
using Sandbox;
using Sandbox.DataAccess;
using Xunit;

namespace PostgresSample
{
    public class PostgresTests : IClassFixture<WebApplicationFactoryBuilder<Startup>>
    {
        private readonly WebApplicationFactoryBuilder<Startup> _testServer;
        private PostgresDependency Postgres => _testServer.DependencyManager.GetDependency<PostgresDependency>();

        public PostgresTests(WebApplicationFactoryBuilder<Startup> factory)
        {
            _testServer = factory.AddDependenciesBuilder(
                                                         new DependenciesBuilder()
                                                             .AddDependency(
                                                                            new PostgresDependencyBuilder()
                                                                                .AddConfig(PostgresDependencyConfig.Default)
                                                                                .AddConfigureServices(context =>
                                                                                {
                                                                                    var postgresContext = (PostgresRunningDependencyContext) context;
                                                                                    context.Services.PostConfigure<PostgresOptions>(options =>
                                                                                        options.ConnectionString = postgresContext.ConnectionString);
                                                                                })));

        }

        [Fact]
        public async Task InsertToPostgres_Return_ExpectedValue()
        {
            // arrange
            var httpClient = _testServer.CreateClient();
            var insertData = Guid.NewGuid().ToString();
            await Postgres.Execute("create table IF NOT EXISTS strings\n(\n\"Id\" integer generated by default as identity\n constraint \"PK_Strings\"\n primary key,\n \"String\" text\n);");

            // act 
            var response = await httpClient.PostAsync($"postgres/postgres?toInsert={insertData}", null);
            var result = await response.Content.ReadAsStringAsync();
            var expected = (await Postgres.ExecuteFirst("SELECT * FROM strings")).String;

            // assert
            result.Should().BeEquivalentTo(expected);
        }


        // TODO flacky - fix it
        [Fact]
        public async Task GetById_Return_ExpectedValue()
        {
            // arrange
            var httpClient = _testServer.CreateClient();
            var insertData = Guid.NewGuid().ToString();
            var expected = insertData;
            var insertId = new Random().Next(1_000_000, int.MaxValue);
            await Postgres.Execute("create table IF NOT EXISTS strings\n(\n\"Id\" integer generated by default as identity\n constraint \"PK_Strings\"\n primary key,\n \"String\" text\n);");
            await Postgres.Execute($"INSERT INTO strings (\"Id\", \"String\") values ({insertId}, '{insertData}')");

            // act 
            var response = await httpClient.GetAsync($"postgres/postgres?id={insertId}");
            var result = await response.Content.ReadAsStringAsync();

            // assert
            result.Should().BeEquivalentTo(expected);
        }
    }
}